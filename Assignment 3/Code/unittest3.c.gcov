        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2:* --------------------------------------------------------
        -:    3:* Brian Laccone
        -:    4:* CS 372 - Assignment 3
        -:    5:* unittest3.c
        -:    6:* --------------------------------------------------------
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:
        -:   16://integer to keep track of how many tests fail
        -:   17:int failCount = 0;
        -:   18:
        -:   19://function to check if two integers are equal
        -:   20://better than using assert in c because it won't stop the program
        3:   21:void assertTrue(int a, int b)
        -:   22:{
        -:   23:
        3:   24:	if (a == b)
        -:   25:	{
        3:   26:		printf("Test: PASSED\n");
        -:   27:	}
        -:   28:	else
        -:   29:	{
    #####:   30:		failCount++;
    #####:   31:		printf("Test: FAILED\n");
        -:   32:	}
        -:   33:
        3:   34:}
        -:   35:
        1:   36:int main()
        -:   37:{
        -:   38:
        1:   39:	int seed = 100;
        1:   40:	int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   41:				remodel, smithy, village, baron, great_hall};
        -:   42:	struct gameState S;
        1:   43:	int numPlayers = 2;
        -:   44:
        1:   45:	printf("----------------- Testing isGameOver() ----------------\n");
        1:   46:	memset(&S,23,sizeof(struct gameState));
        1:   47:    initializeGame(numPlayers, k, seed, &S);
        -:   48:
        -:   49:    //test 1
        1:   50:    printf("\nTest 1 ---> Province supply pile set to 0\n\n");
        -:   51:    //set province supply to 0
        1:   52:    S.supplyCount[province] = 0;
        1:   53:    assertTrue(isGameOver(&S),1);
        1:   54:    printf("\n");
        -:   55:
        -:   56:    //reset province supply
        1:   57:    S.supplyCount[province] = 10;
        -:   58:
        -:   59:    //test2
        1:   60:    printf("\nTest 2 ---> Set three supply piles to 0\n\n");
        -:   61:    //set first three supply piles to 0
        1:   62:    S.supplyCount[0] = 0;
        1:   63:    S.supplyCount[1] = 0;
        1:   64:    S.supplyCount[2] = 0;
        1:   65:    assertTrue(isGameOver(&S),1);
        -:   66:
        -:   67:    //test2
        1:   68:    printf("\nTest 3 ---> Province and all supply piles are not empty\n\n");
        -:   69:    //reset all supply piles to not empty
        1:   70:    S.supplyCount[0] = 10;
        1:   71:    S.supplyCount[1] = 10;
        1:   72:    S.supplyCount[2] = 10;
        1:   73:    assertTrue(isGameOver(&S),0);
        -:   74:
        1:   75:	if (failCount) 
        -:   76:	{
    #####:   77:        printf("\nTEST FAILED\n");
    #####:   78:        printf("FAILS: %d\n\n",failCount);
        -:   79:    }
        -:   80:    else 
        -:   81:    {
        1:   82:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   83:    }
        -:   84:
        1:   85:	return 0;
        -:   86:}
