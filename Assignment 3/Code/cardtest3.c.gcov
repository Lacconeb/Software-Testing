        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2:* --------------------------------------------------------
        -:    3:* Brian Laccone
        -:    4:* CS 372 - Assignment 3
        -:    5:* cardtest3.c
        -:    6:* --------------------------------------------------------
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:
        -:   16://integer to keep track of how many tests fail
        -:   17:int failCount = 0;
        -:   18:
        -:   19://function to check if two integers are equal
        -:   20://better than using assert in c because it won't stop the program
       19:   21:void assertTrue(int a, int b)
        -:   22:{
        -:   23:
       19:   24:	if (a == b)
        -:   25:	{
       18:   26:		printf("Test: PASSED\n");
        -:   27:	}
        -:   28:	else
        -:   29:	{
        1:   30:		failCount++;
        1:   31:		printf("Test: FAILED\n");
        -:   32:	}
        -:   33:
       19:   34:}
        -:   35:
        1:   36:int main()
        -:   37:{
        -:   38:
        1:   39:	int seed = 100;
        1:   40:	int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   41:				remodel, smithy, village, baron, great_hall};
        -:   42:	struct gameState S;
        -:   43:	struct gameState S_Original;
        1:   44:	int numPlayers = 2;
        1:   45:	int bonus = 0;
        -:   46:	int i;
        -:   47:
        1:   48:	printf("----------------- Testing Great Hall Card ----------------\n");
        1:   49:	memset(&S,23,sizeof(struct gameState));
        1:   50:	memset(&S_Original,23,sizeof(struct gameState));
        1:   51:    initializeGame(numPlayers, k, seed, &S);
        -:   52:    //copy S to S_original
        1:   53:    memcpy(&S_Original, &S, sizeof(struct gameState));
        -:   54:    //test Smithy
        1:   55:    cardEffect(great_hall, 0, 0, 0, &S, 0, &bonus);
        -:   56:
        -:   57:    //test1
        1:   58:    printf("\nTest 1 ---> Check if player draws a card and it's from their own deck\n\n");
        1:   59:   	printf("Expected handCount = %d\n", S_Original.handCount[0]+1);
        1:   60:    printf("Actual handCount = %d\n\n", S.handCount[0]);
        1:   61:	assertTrue(S_Original.handCount[0]+1, S.handCount[0]);
        1:   62:	printf("\n");
        1:   63:	printf("Expected deckCount = %d\n", S_Original.deckCount[0]-1);
        1:   64:    printf("Actual deckCount = %d\n\n", S.deckCount[0]);
        1:   65:	assertTrue(S_Original.deckCount[0]-1, S.deckCount[0]);
        1:   66:	printf("\n");
        1:   67:	printf("Expected deckCount from other player= %d\n", S_Original.deckCount[1]);
        1:   68:    printf("Actual deckCount from other player = %d\n\n", S.deckCount[1]);
        1:   69:	assertTrue(S_Original.deckCount[1], S.deckCount[1]);
        1:   70:	printf("\n");
        -:   71:
        -:   72:	//test2
        1:   73:    printf("\nTest 2 ---> Check if player's number of actions increases by 1\n\n");
        1:   74:   	printf("Expected number of actions = %d\n", S_Original.numActions+1);
        1:   75:    printf("Actual number of actions = %d\n\n", S.numActions);
        1:   76:	assertTrue(S_Original.numActions+1, S.numActions);
        1:   77:	printf("\n");
        -:   78:
        -:   79:	//test 3
        1:   80:    printf("\nTest 3 ---> Check if victory piles change\n\n");
        1:   81:    printf("Expected province count = %d\n", S_Original.supplyCount[province]);
        1:   82:    printf("Actual province count = %d\n\n", S.supplyCount[province]);
        1:   83:    assertTrue(S.supplyCount[province], S_Original.supplyCount[province]);
        -:   84:
        1:   85:    printf("\nExpected duchy count = %d\n", S_Original.supplyCount[duchy]);
        1:   86:    printf("Actual duchy count = %d\n\n", S.supplyCount[duchy]);
        1:   87:    assertTrue(S.supplyCount[duchy], S_Original.supplyCount[duchy]);
        -:   88:
        1:   89:    printf("\nExpected estate count = %d\n", S_Original.supplyCount[estate]);
        1:   90:    printf("Actual estate count = %d\n\n", S.supplyCount[estate]);
        1:   91:    assertTrue(S.supplyCount[estate], S_Original.supplyCount[estate]);
        1:   92: 	printf("\n");
        -:   93:
        -:   94: 	//test 4
        1:   95:    printf("\nTest 4 ---> Check if kingdom card piles change\n\n");
       11:   96:    for (i=0; i < 10; i++)
        -:   97:    {
       10:   98:    	printf("Testing card #%d ...\n", i+1);
       10:   99:    	assertTrue(S_Original.supplyCount[k[i]], S.supplyCount[k[i]]);
       10:  100:    	printf("\n");
        -:  101:    }
        -:  102:
        -:  103: 	//test 5
        1:  104:    printf("\nTest 5 ---> Check if other player was affected\n\n");
        -:  105:    //check deck
        1:  106:    printf("Expected deck count = %d\n", S_Original.deckCount[1]);
        1:  107:    printf("Actual deck count = %d\n", S.deckCount[1]);
        1:  108:	assertTrue(S_Original.deckCount[1], S.deckCount[1]);
        1:  109:	printf("\n");
        -:  110:	//check hand
        1:  111:	printf("Expected hand count = %d\n", S_Original.handCount[1]);
        1:  112:    printf("Actual hand count = %d\n", S.handCount[1]);
        1:  113:	assertTrue(S_Original.handCount[1], S.handCount[1]);
        1:  114:	printf("\n");
        -:  115:
        1:  116:    if (failCount) 
        -:  117:	{
        1:  118:        printf("\nTEST FAILED\n");
        1:  119:        printf("FAILS: %d\n\n",failCount);
        -:  120:    }
        -:  121:    else 
        -:  122:    {
    #####:  123:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  124:    }
        -:  125:
        1:  126:	return 0;
        -:  127:}
