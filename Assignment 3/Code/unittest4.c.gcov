        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2:* --------------------------------------------------------
        -:    3:* Brian Laccone
        -:    4:* CS 372 - Assignment 3
        -:    5:* unittest4.c
        -:    6:* --------------------------------------------------------
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:
        -:   16://integer to keep track of how many tests fail
        -:   17:int failCount = 0;
        -:   18:
        -:   19://function to check if two integers are equal
        -:   20://better than using assert in c because it won't stop the program
        3:   21:void assertTrue(int a, int b)
        -:   22:{
        -:   23:
        3:   24:	if (a == b)
        -:   25:	{
        3:   26:		printf("Test: PASSED\n");
        -:   27:	}
        -:   28:	else
        -:   29:	{
    #####:   30:		failCount++;
    #####:   31:		printf("Test: FAILED\n");
        -:   32:	}
        -:   33:
        3:   34:}
        -:   35:
        1:   36:int main()
        -:   37:{
        -:   38:
        1:   39:	int seed = 100;
        1:   40:	int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   41:				remodel, smithy, village, baron, great_hall};
        -:   42:	struct gameState S;
        1:   43:	int numPlayers = 2;
        -:   44:	int preShuffle;
        -:   45:	int postShuffle;
        -:   46:	int deckCount;
        -:   47:
        1:   48:	printf("----------------- Testing shuffle() ----------------\n");
        1:   49:	memset(&S,23,sizeof(struct gameState));
        1:   50:    initializeGame(numPlayers, k, seed, &S);
        -:   51:
        -:   52:    //test 1
        1:   53:    printf("\nTest 1 ---> Set player's deckCount to 0\n\n");
        1:   54:    S.deckCount[0] = 0;
        1:   55:    assertTrue(shuffle(0,&S), -1);
        1:   56: 	printf("\n");
        -:   57:
        -:   58: 	//test2
        1:   59:    printf("\nTest 2 ---> Make sure the deck is actually shuffled\n\n");
        1:   60:    S.deckCount[0] = 20;
        1:   61:    preShuffle = S.deck[0][0];
        1:   62:    shuffle(0,&S);
        1:   63:    postShuffle = S.deck[0][0];
        -:   64:
        1:   65:    if (preShuffle != postShuffle)
        -:   66:    {
        1:   67:    	assertTrue(1,1);
        -:   68:    }
        -:   69:    else
        -:   70:    {
    #####:   71:    	assertTrue(0,1);
        -:   72:    }
        1:   73:    printf("\n");
        -:   74:
        -:   75:    //test3
        1:   76:    printf("\nTest 3 ---> Test if the player has the same amount of cards in the deck before and after shuffling\n\n");
        1:   77:    S.deckCount[0] = 20;
        1:   78:    deckCount = 20;
        1:   79:    shuffle(0,&S);
        1:   80:    printf("Expected deckCount = %d\n", deckCount);
        1:   81:    printf("Actual deckCount = %d\n\n", S.deckCount[0]);
        1:   82:    assertTrue(S.deckCount[0], 20);
        1:   83:    printf("\n");    
        -:   84:
        -:   85:
        1:   86:    if (failCount) 
        -:   87:	{
    #####:   88:        printf("\nTEST FAILED\n");
    #####:   89:        printf("FAILS: %d\n\n",failCount);
        -:   90:    }
        -:   91:    else 
        -:   92:    {
        1:   93:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   94:    }
        -:   95:
        1:   96:	return 0;
        -:   97:}
