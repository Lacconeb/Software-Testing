        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2:* --------------------------------------------------------
        -:    3:* Brian Laccone
        -:    4:* CS 372 - Assignment 3
        -:    5:* unittest1.c
        -:    6:* 
        -:    7:* Description: This unit test is 
        -:    8:* 
        -:    9:* 
        -:   10:* --------------------------------------------------------
        -:   11:*/
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "rngs.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:
        -:   20://integer to keep track of how many tests fail
        -:   21:int failCount = 0;
        -:   22:
        -:   23://function to check if two integers are equal
        -:   24://better than using assert in c because it won't stop the program
        5:   25:void assertTrue(int a, int b)
        -:   26:{
        -:   27:
        5:   28:	if (a == b)
        -:   29:	{
        5:   30:		printf("Test: PASSED\n");
        -:   31:	}
        -:   32:	else
        -:   33:	{
    #####:   34:		failCount++;
    #####:   35:		printf("Test: FAILED\n");
        -:   36:	}
        -:   37:
        5:   38:}
        -:   39:
        1:   40:int main()
        -:   41:{
        1:   42:	int seed = 100;
        1:   43:	int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   44:				remodel, smithy, village, baron, great_hall};
        -:   45:	struct gameState S;
        1:   46:	int numPlayers = 2;
        1:   47:	int deckCount = 0;
        -:   48:
        -:   49:
        1:   50:	printf("----------------- Testing gainCard() ----------------\n");
        1:   51:	memset(&S,23,sizeof(struct gameState));
        1:   52:    initializeGame(numPlayers, k, seed, &S);
        -:   53:
        -:   54:    //test 1
        1:   55:    printf("\nTest 1 ---> Add card to deck\n\n");
        1:   56:    deckCount = S.deckCount[0];
        1:   57:    gainCard(province,&S,1,0);
        1:   58:    printf("Expected deckCount = %d\n", deckCount+1);
        1:   59:    printf("Actual deckCount = %d\n\n", S.deckCount[0]);
        1:   60:    assertTrue(deckCount+1,S.deckCount[0]);
        -:   61:
        -:   62:    //test 2
        1:   63:    printf("\nTest 2 ---> Add card to discard pile\n\n");
        1:   64:    int discardCount = S.discardCount[0];
        1:   65:    gainCard(province,&S,0,0);
        1:   66:    printf("Expected discardCount = %d\n", discardCount+1);
        1:   67:    printf("Actual discardCount = %d\n\n", S.discardCount[0]);
        1:   68:    assertTrue(discardCount+1,S.discardCount[0]);
        -:   69:
        -:   70:    //test3
        1:   71:    printf("\nTest 3 ---> Add card to hand\n\n");
        1:   72:    int handCount = S.handCount[0];
        1:   73:    gainCard(province,&S,2,0);
        1:   74:    printf("Expected handCount = %d\n", handCount+1);
        1:   75:    printf("Actual handCount = %d\n\n", S.handCount[0]);
        1:   76:    assertTrue(handCount+1,S.handCount[0]);
        -:   77:
        -:   78:    //test 4
        1:   79:    printf("\nTest 4 ---> Set province supply pile to empty\n\n");
        -:   80:    //set province supply count to 0
        1:   81:    S.supplyCount[province] = 0;
        1:   82:    assertTrue(gainCard(province,&S,0,0), -1);
        -:   83:    //reset province supply count to use in the next 
        1:   84:    S.supplyCount[province] = 8;
        -:   85:
        -:   86:    //test 5
        1:   87:    printf("\nTest 5 ---> Province supply decreases after gaining that card\n\n");
        1:   88:    int provinceSupply = S.supplyCount[province];
        1:   89:    gainCard(province,&S,0,0);
        1:   90:    printf("Expected provinceSupply = %d\n", provinceSupply-1);
        1:   91:    printf("Actual provinceSupply = %d\n\n", S.supplyCount[province]);
        1:   92:    assertTrue(provinceSupply-1,S.supplyCount[province]);
        -:   93:
        -:   94:
        1:   95:    if (failCount) 
        -:   96:    {
    #####:   97:        printf("\nTEST FAILED\n");
    #####:   98:        printf("FAILS: %d\n\n",failCount);
        -:   99:    }
        -:  100:    else 
        -:  101:    {
        1:  102:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  103:    }
        -:  104:
        1:  105:    return 0;
        -:  106:}
