        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2:* --------------------------------------------------------
        -:    3:* Brian Laccone
        -:    4:* CS 372 - Assignment 3
        -:    5:* cardtest1.c
        -:    6:* --------------------------------------------------------
        -:    7:*/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:
        -:   16://integer to keep track of how many tests fail
        -:   17:int failCount = 0;
        -:   18:
        -:   19://function to check if two integers are equal
        -:   20://better than using assert in c because it won't stop the program
       17:   21:void assertTrue(int a, int b)
        -:   22:{
        -:   23:
       17:   24:	if (a == b)
        -:   25:	{
       15:   26:		printf("Test: PASSED\n");
        -:   27:	}
        -:   28:	else
        -:   29:	{
        2:   30:		failCount++;
        2:   31:		printf("Test: FAILED\n");
        -:   32:	}
        -:   33:
       17:   34:}
        -:   35:
        1:   36:int main()
        -:   37:{
        -:   38:
        1:   39:	int seed = 100;
        1:   40:	int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   41:				remodel, smithy, village, baron, great_hall};
        -:   42:	struct gameState S;
        -:   43:	struct gameState S_Original;
        1:   44:	int numPlayers = 2;
        1:   45:	int bonus = 0;
        -:   46:	int i;
        -:   47:	int card;
        -:   48:	int treasureCount;
        -:   49:	int treasureCountOriginal;
        -:   50:
        1:   51:	printf("----------------- Testing Adventurer Card ----------------\n");
        1:   52:	memset(&S,23,sizeof(struct gameState));
        1:   53:	memset(&S_Original,23,sizeof(struct gameState));
        1:   54:    initializeGame(numPlayers, k, seed, &S);
        -:   55:
        1:   56:    memcpy(&S_Original, &S, sizeof(struct gameState));
        -:   57:
        1:   58:    cardEffect(adventurer, 0, 0, 0, &S, 0, &bonus);
        -:   59:
        -:   60:    //test 1
        1:   61:    printf("\nTest 1 ---> Check if player draws 2 cards\n\n");
        1:   62:    printf("Expected handCount = %d\n", S_Original.handCount[0]+2);
        1:   63:    printf("Actual handCount = %d\n\n", S.handCount[0]);
        1:   64:    assertTrue(S.handCount[0], S_Original.handCount[0]+2);
        1:   65: 	printf("\n");
        -:   66:
        -:   67: 	//test 2
        1:   68:    printf("\nTest 2 ---> Check if victory piles change\n\n");
        1:   69:    printf("Expected province count = %d\n", S_Original.supplyCount[province]);
        1:   70:    printf("Actual province count = %d\n\n", S.supplyCount[province]);
        1:   71:    assertTrue(S.supplyCount[province], S_Original.supplyCount[province]);
        -:   72:
        1:   73:    printf("\nExpected duchy count = %d\n", S_Original.supplyCount[duchy]);
        1:   74:    printf("Actual duchy count = %d\n\n", S.supplyCount[duchy]);
        1:   75:    assertTrue(S.supplyCount[duchy], S_Original.supplyCount[duchy]);
        -:   76:
        1:   77:    printf("\nExpected estate count = %d\n", S_Original.supplyCount[estate]);
        1:   78:    printf("Actual estate count = %d\n\n", S.supplyCount[estate]);
        1:   79:    assertTrue(S.supplyCount[estate], S_Original.supplyCount[estate]);
        1:   80: 	printf("\n");
        -:   81:
        -:   82: 	//test 3
        1:   83:    printf("\nTest 3 ---> Check if kingdom card piles change\n\n");
       11:   84:    for (i=0; i < 10; i++)
        -:   85:    {
       10:   86:    	printf("Testing card #%d ...\n", i+1);
       10:   87:    	assertTrue(S_Original.supplyCount[k[i]], S.supplyCount[k[i]]);
       10:   88:    	printf("\n");
        -:   89:    }
        -:   90:
        -:   91:
        -:   92: 	//test 4
        1:   93:    printf("\nTest 4 ---> Check if player gained 2 treasure cards\n\n");
        -:   94:
        6:   95:    for (i = 0; i < S.handCount[0]; i++) {
        5:   96:        card = S.hand[0][i];
        5:   97:        if (card == copper || card == silver || card == gold) {
        4:   98:            treasureCount++;
        -:   99:        }
        -:  100:    }
        -:  101:
        6:  102:    for (i = 0; i < S_Original.handCount[0]; i++) {
        5:  103:        card = S_Original.hand[0][i];
        5:  104:        if (card == copper || card == silver || card == gold) {
        4:  105:            treasureCountOriginal++;
        -:  106:        }
        -:  107:    }
        -:  108:
        1:  109:    assertTrue(treasureCountOriginal + 2, treasureCount);
        1:  110: 	printf("\n");
        -:  111:
        -:  112: 	//test 5
        1:  113:    printf("\nTest 5 ---> Check if other player was affected\n\n");
        -:  114:    //check deck
        1:  115:    printf("Expected deck count = %d\n", S_Original.deckCount[1]);
        1:  116:    printf("Actual deck count = %d\n", S.deckCount[1]);
        1:  117:	assertTrue(S_Original.deckCount[1], S.deckCount[1]);
        1:  118:	printf("\n");
        -:  119:	//check hand
        1:  120:	printf("Expected hand count = %d\n", S_Original.handCount[1]);
        1:  121:    printf("Actual hand count = %d\n", S.handCount[1]);
        1:  122:	assertTrue(S_Original.handCount[1], S.handCount[1]);
        1:  123:	printf("\n");
        -:  124:    
        -:  125:
        -:  126:
        1:  127:	 if (failCount) 
        -:  128:	{
        1:  129:        printf("\nTEST FAILED\n");
        1:  130:        printf("FAILS: %d\n\n",failCount);
        -:  131:    }
        -:  132:    else 
        -:  133:    {
    #####:  134:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  135:    }
        -:  136:
        1:  137:	return 0;
        -:  138:}
